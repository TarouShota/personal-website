{"mappings":"AAAA,EAqHE,AArHF,8sEAqHE,AArHF,EAqHE,CAGF,EAmDE,AAnDF,suCAmDE,AAnDF,EAmDE,CAGF,EAAG,AAAH,CAAG;AAEH,EAAyD,AAAzD,uDAAyD;AACzD,GAAG,CAAC,OAAO,GAAG,CAAC;IACX,CAAS,UAAE,OAAO;AACtB,CAAC;AACD,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAe","sources":["script.js"],"sourcesContent":["/*\r\nlet sayHello = (name) => {\r\n    let phrase = `Hello ${name}`;\r\n    say(phrase);\r\n}\r\n\r\nlet say = (phrase) => {\r\n    alert(`** ${phrase} **`);\r\n}\r\n\r\n\r\n//sayHello();\r\n\r\nlet user = {\r\n    name: 'Shota',\r\n    age: 19\r\n};\r\nlet clone = {};\r\nfor (let key in user) {\r\n    clone[key] = user[key];\r\n}\r\nfor (let key in clone) {\r\n    console.log(clone[key]);\r\n}\r\n//alert(clone.age);\r\n\r\nclone = Object.assign({}, user);\r\n\r\nlet randomValue = { canWalk: true };\r\n\r\nconsole.log(`${clone.name}`);\r\nObject.assign(clone, randomValue);\r\n\r\nlet deepEqual = (firstValue, secondValue) => {\r\n    if (firstValue === secondValue) {\r\n        return true\r\n    }\r\n    return false\r\n}\r\n//alert(deepEqual(user, clone));\r\nlet userObj = {\r\n    name: \"John\",\r\n    sizes: {\r\n        height: 182,\r\n        width: 50\r\n    }\r\n};\r\n\r\nlet cloneObj = Object.assign({}, userObj);\r\n\r\nconsole.log(userObj.sizes === cloneObj.sizes); // true, same object\r\n\r\n// user and clone share sizes\r\nuserObj.sizes.width = userObj.sizes.width + 100;       // change a property from one place\r\nconsole.log(cloneObj.sizes.width); // 51, see the result from the other one\r\nconsole.log(cloneObj[0]);\r\nlet a = 0;\r\nlet b = 0;\r\nlet calculator = {\r\n    read() {\r\n        a = parseInt(window.prompt('A'));\r\n        b = parseInt(window.prompt('B'));\r\n    },\r\n    sum() {\r\n        this.read()\r\n        let c = a + b;\r\n        return c\r\n    },\r\n    mul() {\r\n        c = a * b;\r\n        return c\r\n    }\r\n};\r\n//console.log(calculator.sum());\r\n//console.log(calculator.mul());\r\n\r\n// Ladder Exercise !\r\n\r\nlet ladder = {\r\n    step: 0,\r\n    up: function () {\r\n        this.step++;\r\n        return this\r\n    },\r\n    down() {\r\n        this.step--;\r\n        return this\r\n    },\r\n    showStep() { // shows the current step\r\n        alert(this.step);\r\n        return this\r\n    }\r\n};\r\n//ladder.showStep();\r\nladder.up().up().showStep()\r\n\r\n//code wars challenge\r\nlet sum = (array) => {\r\n    let result = 0;\r\n    for (let theSum of array) {\r\n        result = result + theSum;\r\n\r\n    }\r\n    return result;\r\n}\r\n\r\nfunction solution(number) {\r\n    let result = [];\r\n    for (i = 1; i < number; i++) {\r\n        if (i % 3 == 0 || i % 5 == 0) {\r\n            result.push(i);\r\n        }\r\n    } return sum(result)\r\n}\r\n\r\nconsole.log(solution(10));\r\n\r\n*/\r\n\r\n\r\n/*var countOperations = function (num1, num2) {\r\n\r\n    while (num1 <= 0 || num2 <= 0) {\r\n        if (num2 >= num1) {\r\n            num2 = num2 - num1;\r\n            counter++\r\n            countOperations(num1, num2);\r\n        }\r\n        if (num1 >= num2) {\r\n            num1 = num2 - num1;\r\n            counter++\r\n            countOperations(num1, num2);\r\n        }\r\n        return counter\r\n    }\r\n};\r\n\r\n\r\nvar twoSum = function (nums, target) {\r\n    let fltArray = nums.filter(numbers => numbers < target);\r\n    let counter = [];\r\n    for (i = 0; i < fltArray.length; i++) {\r\n        fltArray.forEach((value) => {\r\n            if (value != fltArray[i]) {\r\n                if (value + fltArray[i] === target) {\r\n                    counter = value + fltArray[i];\r\n                    counter = ([nums.indexOf(value), (nums.indexOf(fltArray[i]))]);\r\n\r\n                }\r\n            }\r\n\r\n\r\n\r\n        });\r\n\r\n    }\r\n    if (counter.length < 1) {\r\n        let results = nums.indexOf(target / 2);\r\n        while (results != -1) {\r\n            counter.push(results);\r\n            results = nums.indexOf(target / 2, results + 1);\r\n\r\n        }\r\n\r\n    }\r\n    return counter\r\n\r\n\r\n};\r\nconsole.log(twoSum([4, 3, 1, 2], 6));\r\nconsole.log(twoSum([5, 1, 3, 4, 5, 8], 10));\r\n*/\r\n\r\n\r\n///\r\n\r\n//import { Scrollbar } from \"smooth-scrollbar/scrollbar\";\r\nvar options = {\r\n    'damping': 0.00001\r\n}\r\nScrollbar.init(document.querySelector(\"#my-scrollbar\"));\r\n"],"names":[],"version":3,"file":"index.672d4772.js.map","sourceRoot":"/__parcel_source_root/"}